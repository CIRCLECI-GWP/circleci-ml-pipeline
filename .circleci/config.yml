version: 2.1

# Define custom commands for this config
# See https://circleci.com/docs/reusing-config/#authoring-reusable-commands
commands:
  check-python:
    steps:
      - run:
          command: python3 --version
          name: Check Python version
      - run:
          command: pip3 --version
          name: Check Pip version
  create-env:
    steps:
      - run:
          # Environment variables must be configured in a CircleCI project or context
          command: |
            cat \<<- EOF > .env
            DEPLOY_SERVER_HOSTNAME=$DEPLOY_SERVER_HOSTNAME
            DEPLOY_SERVER_USERNAME=$DEPLOY_SERVER_USERNAME
            DEPLOY_SERVER_PASSWORD=$DEPLOY_SERVER_PASSWORD
            DEPLOY_SERVER_PATH=$DEPLOY_SERVER_PATH
            EOF
          name: Create .env file containing secrets
  wait-5:
    steps:
      - run:
          command: sleep 5
          name: Wait 5 seconds

# Define custom jobs for this config
# See: https://circleci.com/docs/jobs-steps/
jobs:
  install-build:
    # For running on CircleCI's self-hosted runners
    machine: true
    resource_class: RUNNER_NAMESPACE/RUNNER_RESOURCE_CLASS # Update this to reflect your self-hosted runner resource class details
    # For running on CircleCI's compute resources you would replace the above with the following for all jobs:
    # docker:
    #   - image: cimg/python:3.11.4
    steps:
      - checkout # Check out the code in the project directory
      - check-python # Invoke command "check-python"
      - create-env     
      - run: 
          command: source ./tools/install.sh
          name: Run script to install dependencies
      - run:
          command: source ./venv/bin/activate && python3 ./ml/1_build.py # Activate the Python virtual environment before running Python scripts
          name: Build the model
      - persist_to_workspace:
          # Workspaces let you persist data between jobs - saving time on re-downloading or recreating assets https://circleci.com/docs/workspaces/
          # Must be an absolute path or relative path from working_directory. This is a directory on the container that is taken to be the root directory of the workspace.
          # In this example, the workspace root is the working directory (.)
          root: .
          paths:
            - venv # Persist the Python virtual environment
            - ml # Persist the ml directory which now includes model and training data
            - .env # Persist the .env file containing secrets
            - tools # Persist the tools directory
  train:
    # For running on CircleCI's self-hosted runners - details taken from environment variables
    machine: true
    resource_class: RUNNER_NAMESPACE/RUNNER_RESOURCE_CLASS # Update this to reflect your self-hosted runner resource class details
    steps: # Steps in jobs are run sequentially
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          # In this example, the workspace root is the working directory (.)
          at: .
      - run:
          command: source ./venv/bin/activate && python3 ./ml/2_train.py
          name: Train the model
      - persist_to_workspace:
          root: .
          paths:
            - ml # Only files in the ml directory have changed and need to be persisted back to the workspace
  test:
    # For running on CircleCI's self-hosted runners - details taken from environment variables
    machine: true
    resource_class: RUNNER_NAMESPACE/RUNNER_RESOURCE_CLASS # Update this to reflect your self-hosted runner resource class details
    steps: # Steps in jobs are run sequentially
      - attach_workspace:
          at: .
      - run:
          command: source ./venv/bin/activate && python3 ./ml/3_test.py
          name: Test the model
  retrain:
    # For running on CircleCI's self-hosted runners - details taken from environment variables
    machine: true
    resource_class: RUNNER_NAMESPACE/RUNNER_RESOURCE_CLASS # Update this to reflect your self-hosted runner resource class details

    steps:
      - attach_workspace:
          at: .
      - run:
          command: source ./venv/bin/activate && python3 ./ml/6_retrain.py
          name: Retrain the model
      - run:
          # You could trigger custom notifications here so that the person responsible for a particular job is notified via email, Slack, etc.
          name: Run on fail status
          command: |
              echo "I am result of above failed job" 
          when: on_fail
      - persist_to_workspace:
          root: .
          paths:
            - ml # Only files in the ml directory have changed and need to be persisted back to the workspace
  package:
    # For running on CircleCI's self-hosted runners - details taken from environment variables
    machine: true
    resource_class: RUNNER_NAMESPACE/RUNNER_RESOURCE_CLASS # Update this to reflect your self-hosted runner resource class details

    steps:
      - attach_workspace:
          at: .
      - run:
          command: source ./venv/bin/activate && python3 ./ml/4_package.py
          name: Package the model  
  deploy:
    # For running on CircleCI's self-hosted runners - details taken from environment variables
    machine: true
    resource_class: RUNNER_NAMESPACE/RUNNER_RESOURCE_CLASS # Update this to reflect your self-hosted runner resource class details

    steps:
      - attach_workspace:
          at: .
      - run:
          command: source ./venv/bin/activate && python3 ./ml/5_deploy.py
          name: Deploy the model
  test-deployment:
    # For running on CircleCI's self-hosted runners - details taken from environment variables
    machine: true
    resource_class: RUNNER_NAMESPACE/RUNNER_RESOURCE_CLASS # Update this to reflect your self-hosted runner resource class details
    steps:
      - attach_workspace:
          at: .
      - wait-5
      - run:
          command: source ./venv/bin/activate && python3 ./ml/7_test_deployed_model.py
          name: Test the deployed model

# Invoke jobs via workflows
# See: https://circleci.com/docs/workflows/
workflows:
  # This workflow does a full build from scratch and deploys the model
  build-deploy:
    jobs:
      - install-build:
          filters:
            branches:
              only:
                - main # Only run the job when the main branch is updated
      - train:
          requires: # Only run the job when the preceding step in the ML process has been completed so that they are run sequentially
            - install-build
      # To demonstrate how to run two tests concurrently, we'll run the same test twice under different names - if either required test fails, the next job that requires them (in this case, package) will not run - https://circleci.com/docs/workflows/#concurrent-job-execution
      - test:
          name: test-1
          requires: 
            - train
      - test:
          name: test-2
          requires: 
            - train
      - package:
          requires:
            - test-1
            - test-2
      # Do not deploy without manual approval - you can inspect the console output from training and make sure you are happy to deploy
      - deploy:
          requires: 
            - package 
      - test-deployment:
          requires:
            - deploy
  retrain-deploy:
      # Trigger on a schedule or when retrain branch is updated
      triggers:
        - schedule:
            cron: "0 0 * * *" # Daily
            filters:
              branches:
                only:
                  - retrain
      jobs:
        - install-build
        - retrain:
            requires:
              - install-build
        # Do not redeploy without manual approval - you can inspect the console output from training and make sure you are happy to deploy the retrained model
        - hold: # A job that will require manual approval in the CircleCI web application.
            requires: 
              - retrain
            type: approval # This key-value pair will set your workflow to a status of "On Hold"
        - package:
            requires:
              - hold
        - deploy:
            requires:
              - package
        - test-deployment:
            requires:
              - deploy
